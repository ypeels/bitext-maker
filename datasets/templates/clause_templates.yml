# first try: all templates will be unmodified indicative active
  # "transformations" will modify 
    # verb tense, mood, voice, etc.
    # nouns via adjectives, particples, etc.
    # combine clauses

# not totally sure whether to redo this for every semantic category... 
#---
#
# too annoying - have to deal with direct address (no article!) and, if sticking with 你好, pronouns too.
# let's use regular SVO for "hello world" instead
# id: greeting
# example: Hello , world|A !
# syntax:
#   symbols:
#     A:
#       type: NP
#       description: addressee
#   templates:
#     en:
#       template: hello , A !
#     zh:
#       template: 你 好 ， A ！
#       # TODO: handle plural A
#       # TODO: polite 您好?
#       #dependencies:
#       #  你: A # alternative: make 2 templates, 1 for plural A... but then en needs a duplicate!
# semantics:
# - id:
#   notags: # forbidden tags
#     A: plural # ugh, have to infer this from the NP?

transitive:

# TODO: convert everything to lists?? 
  # con: more awkward code
  # pro: human-friendly data migration if data format ever changes?
  
# TODO: syntax-checker - pending format changes...
  # but can pyyaml specify line numbers?
  # how about writing a blank data entry in each file, and have code check structures against that?


  example: Alice|S kicks|V Bob|O .

  symbols:
    V: 
      type: verb
      description: head verb # hmm, code currently passes tags down to nodes with "head" in description...
    S: 
      type: NP
      description: subject  
    O:
      type: NP
      description: object


  # purely syntactic - semantics are in "verbsets"
  # TODO: descriptions for language-specific tags
  langs:
    en: 
      template: S V O
      punctuation: '.'
      tags:
        S: subjective # needed by pronouns
        O: objective 
      dependencies: # "deps" in code
        V: S
    zh: 
      template: S V O
      punctuation: 。
   
  
meta:
  example: We|S know|V (Alice kicks Bob)|C
  
  symbols:
    V:
      type: verb
      description: head verb
    S: 
      type: NP
      description: subject
    C:
      type: Clause
      description: complement
      
  langs:
    en:
      template: S V C
      dependencies: { V: S }
      #prewords: { C: that } # not passed down - for lang-specific, currently only tags and forms get auto-propagated down
      #punctuation: '.' # use punctuation from C for now - beats having to remember to add "remove punctuation" transform over and over
      tags: { S: subjective }
      
      
    zh: 
      template: S V C
      #punctuation: 。
        
    
modal:
  example: Alice|S wants|V (to kick Bob)|C
  
  symbols:
    V:
      type: verb
      description: head verb
    S: 
      type: NP
      description: subject
    C: # but also forcibly specify a transformation? how to guarantee C doesn't have a subject?
      type: Clause 
      description: complement
      
    # modal is LIKE a meta, except after adding the complement, it has to "rip" its S off and claim as its own
    
  langs:
    en:
      template: S V C
      dependencies: { V: S }
      #punctuation: '.'
      tags: { S: subjective }
      
      
    zh: 
      template: S V C
      #punctuation: 。
    
    
# ---------------------------------------------------------------------
    
# so here are sentences that aren't quite ready for the full set of Clause transformations
  # they are excluded from "modifiable_template_ids()' in main
# these are transformations that largely try to preserve a monotonic-ish order, fwiw...
把:
  # punched an ugly hole through Template for this...
  categories: [action] 
  
  symbols:
    S: 
      type: NP
      options:
        tags: [animate]
        # oh, I had this set up the whole time
    V: 
      type: verb
      description: head 
    O: 
      type: NP
      options:  
        #tags: [inanimate]        
        # TODO: enforce in Node code? currently just check this in main harness, as an "honor code" sort of thing
        # O = pronoun can look annoyingly wrong...
        # ugh, S = inanimate can look wrong in en too (above)
        forbidden templates: [pronoun] 
    P:
      type: pronoun
      dependencies: O
  
  langs:
    en: # currently incompatible with participle, since you'd have to work with two head verbs (take and V)
      template: S took O and V P 
      punctuation: '.'
      forms: { V: VBD }
      tags:
        S: subjective
        O: objective
        P: objective
    zh:
      template: S 把 O V 了 # just crudely omitting P
      punctuation: 。

  
# ugh, make this one form per language, and save alternate forms for transformations? (like O, V S for "add emphasis")
  # otherwise, you'd have to keep track right here about which template goes with which, across all languages
  # WARNING: this could be problematic if there are many equivalent forms in a single language...
  # TODO: if i'm not accessing raw data directly, it's only SLIGHTLY less convenient to use list?
    # bleh, let's postpone as much complexity as possible and just see what's the minimal code it takes to get this working
#- lang: zh
#  template: O ， S V 。
    

# TODO: transformation that allows compound VP like "kick ass and take names"
  # hmm, this would parallel NP better (trivially?) if I grouped things as NP/VP instead of S/V/O...
  # in current framework, it would be a transformation that would take a second clause with null subject and "join" with first




    
    
    